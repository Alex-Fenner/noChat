{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","message","name","state","setState","chat","setChat","socketRef","useRef","ROOT_CSS","css","height","width","useEffect","current","io","connect","on","disconnect","onTextChange","e","target","value","className","map","index","class","TextField","onChange","label","id","variant","onClick","emit","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSA+EeA,MAxEf,WACE,MAA0BC,mBAAS,CAAEC,QAAS,GAAIC,KAAM,KAAxD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAYC,mBACZC,EAAWC,YAAI,CACnBC,OAAQ,QACRC,MAAO,UAGTC,qBACE,WAKE,OAJAN,EAAUO,QAAUC,IAAGC,QAAQ,yBAC/BT,EAAUO,QAAQG,GAAG,WAAW,YAAwB,IAArBf,EAAoB,EAApBA,KAAMD,EAAc,EAAdA,QACvCK,EAAQ,GAAD,mBAAKD,GAAL,CAAW,CAAEH,OAAMD,iBAErB,kBAAMM,EAAUO,QAAQI,gBAEjC,CAACb,IAGH,IAAMc,EAAe,SAACC,GACpBhB,EAAS,2BAAKD,GAAN,kBAAciB,EAAEC,OAAOnB,KAAOkB,EAAEC,OAAOC,UAuBjD,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAU,cAAf,UACE,cAAC,IAAD,CAAgBA,UAAWd,EAA3B,SAfGJ,EAAKmB,KAAI,WAAoBC,GAApB,IAAGvB,EAAH,EAAGA,KAAMD,EAAT,EAASA,QAAT,OACd,sBAAKyB,MAAM,QAAX,UACE,6BAAKxB,IACP,qBAAKwB,MAAM,YAAX,SAEE,4BAAIzB,QAJkBwB,QAiBtB,sBAAKF,UAAU,SAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACI,EAAA,EAAD,CAAWzB,KAAK,OAAO0B,SAAU,SAACR,GAAD,OAAOD,EAAaC,IAAIE,MAAOnB,EAAMD,KAAM2B,MAAM,WAEpF,8BACE,cAACF,EAAA,EAAD,CACEzB,KAAK,UACL0B,SAAU,SAACR,GAAD,OAAOD,EAAaC,IAC9BE,MAAOnB,EAAMF,QACb6B,GAAG,4BACHC,QAAQ,WACRF,MAAM,cAGV,wBAAQG,QAxCQ,SAACZ,GACvB,IAAQlB,EAAkBC,EAAlBD,KAAMD,EAAYE,EAAZF,QACdM,EAAUO,QAAQmB,KAAK,UAAW,CAAE/B,OAAMD,YAC1CmB,EAAEc,iBACF9B,EAAS,CAAEH,QAAS,GAAIC,UAoClB,mCC5DKiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4e9b7ca6.chunk.js","sourcesContent":["import TextField from \"@material-ui/core/TextField\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport io from \"socket.io-client\"\nimport \"./App.css\"\nimport { css } from '@emotion/css';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\nfunction App() {\n  const [state, setState] = useState({ message: \"\", name: \"\" })\n  const [chat, setChat] = useState([])\n\n  const socketRef = useRef()\n  const ROOT_CSS = css({\n    height: '500px',\n    width: '300px'\n  });\n\n  useEffect(\n    () => {\n      socketRef.current = io.connect(\"http://localhost:3001\")\n      socketRef.current.on(\"message\", ({ name, message }) => {\n        setChat([...chat, { name, message }])\n      })\n      return () => socketRef.current.disconnect()\n    },\n    [chat]\n  )\n\n  const onTextChange = (e) => {\n    setState({ ...state, [e.target.name]: e.target.value })\n  }\n\n  const onMessageSubmit = (e) => {\n    const { name, message } = state\n    socketRef.current.emit(\"message\", { name, message })\n    e.preventDefault()\n    setState({ message: \"\", name })\n  }\n\n  const renderChat = () => {\n    return chat.map(({ name, message }, index) => (\n      <div class=\"card2\" key={index}>\n        <h6>{name}</h6>\n      <div class=\"container\">\n        \n        <p>{message}</p>\n      </div>\n    </div>\n\n    ))\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"render-chat\">\n        <ScrollToBottom className={ROOT_CSS}>\n          {renderChat()}\n        </ScrollToBottom>\n        <div className=\"footer\">\n          <div className=\"name-field\">\n            <TextField name=\"name\" onChange={(e) => onTextChange(e)} value={state.name} label=\"Name\" />\n          </div>\n          <div>\n            <TextField\n              name=\"message\"\n              onChange={(e) => onTextChange(e)}\n              value={state.message}\n              id=\"outlined-multiline-static\"\n              variant=\"outlined\"\n              label=\"Message\"\n            />\n          </div>\n          <button onClick={onMessageSubmit}>Send Message</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}